generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Message {
//   id Int @id @default(autoincrement())
//  content String
// }

model Customer {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  phone String
  email String @unique
  password String
  streetAddress1 String?
  streetAddress2 String?
  city String?
  state String?
  zipcode Int?
  vehicles Vehicle[]
  quotes Quote[]
  appointments Appointment[]
}

model Mechanic {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  phone String
  email String? @unique
  password String?
  streetAddress1 String?
  streetAddress2 String?
  city String?
  state String?
  zipcode Int?
  quotes Quote[]
  // appointments Appointment[]
}

model Vehicle {
  id Int @id @default(autoincrement())
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  vin String
  vehicleType String
  year Int
  make String
  model String
  imgUrl String?
  quotes Quote[]
}

// //join table
// model QuoteService {
//   id Int @id @default(autoincrement())
//   service Service @relation(fields: [serviceID], references: [id])
//   serviceID Int
//   quote Quote @relation(fields: [quoteID], references: [id])
//   quoteID Int
// }


model Quote {
  id Int @id @default(autoincrement())
  transaction Transaction?
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  // probably don't need the mechanic fields on the quote model since they are present in the appointment model
  mechanic Mechanic? @relation(fields: [mechanicID], references: [id])
  mechanicID Int?
  vehicle Vehicle @relation(fields: [vehicleID], references: [id])
  vehicleID Int
  status String? //status includes [quote, confirm, repair, complete]
  services Service[]
  createdAt DateTime @default(now())
  costEstimate Float?
  description String?
  appointment Appointment?
}

model Transaction {
  id Int @id @default(autoincrement())
  quote Quote @relation(fields: [quoteID], references: [id])
  quoteID Int
  cost Float
  dateTime DateTime
}

model Appointment {
  id Int @id @default(autoincrement())
  customer Customer @relation(fields: [customerID], references: [id])
  customerID Int
  scheduleDate String //DateTime
  quote Quote? @relation(fields: [quoteID], references: [id])
  quoteID Int?
  // mechanic Mechanic @relation(fields: [mechanicID], references: [id])
  // mechanicID Int?
  // vehicle Vehicle @relation(fields: [vehicleID], references: [id])
  // vehicleID Int
}

model Service {
  id Int @id @default(autoincrement())
  price Float
  type String
  quote Quote? @relation(fields: [quoteID], references: [id])
  quoteID Int?
  // quotes QuoteService[]
}